IF ( EXISTS "${CMAKE_SOURCE_DIR}/ROOT" )
	# If we are building from the root directory, just add a
	# library dependency on the project instead of searching
	# for the include files

	SET(@LIBNAME@_LIBRARY @LIBNAME@)

	GET_TARGET_PROPERTY(@LIBNAME@_INCLUDE_DIR @LIBNAME@ SRCTREE_INCLUDE_DIR)
	IF(NOT @LIBNAME@_INCLUDE_DIR)
		IF (@LIBNAME@_FIND_REQUIRED)
			MESSAGE(FATAL_ERROR "Failed to find @LIBNAME@ in source tree")
		ENDIF (@LIBNAME@_FIND_REQUIRED)
		RETURN()
	ENDIF(NOT @LIBNAME@_INCLUDE_DIR)

	SET(@LIBNAME@_FOUND TRUE)

	IF (NOT @LIBNAME@_FIND_QUIETLY)
		MESSAGE(STATUS "Found @LIBNAME@ as subproject: ${@LIBNAME@_INCLUDE_DIR}")
	ENDIF (NOT @LIBNAME@_FIND_QUIETLY)

	RETURN()
ENDIF ( EXISTS "${CMAKE_SOURCE_DIR}/ROOT" )

FIND_PATH(@LIBNAME@_INCLUDE_DIR @HEADER@)
IF (@LIBNAME@_USE_STATIC_LIBS)
	SET( _@LIBNAME@_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
	IF(WIN32)
		SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
	ELSE(WIN32)
		SET(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
	ENDIF(WIN32)
ENDIF (@LIBNAME@_USE_STATIC_LIBS)
FIND_LIBRARY(@LIBNAME@_LIBRARY NAMES @LIBNAME@)
IF (@LIBNAME@_USE_STATIC_LIBS)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ${_@LIBNAME@_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
ENDIF (@LIBNAME@_USE_STATIC_LIBS )

IF (@LIBNAME@_INCLUDE_DIR AND @LIBNAME@_LIBRARY)
	SET(@LIBNAME@_FOUND TRUE)
ENDIF (@LIBNAME@_INCLUDE_DIR AND @LIBNAME@_LIBRARY)


IF (@LIBNAME@_FOUND)
	IF (NOT @LIBNAME@_FIND_QUIETLY)
		MESSAGE(STATUS "Found @LIBNAME@: ${@LIBNAME@_LIBRARY}")
	ENDIF (NOT @LIBNAME@_FIND_QUIETLY)
ELSE (@LIBNAME@_FOUND)
	IF (@LIBNAME@_FIND_REQUIRED)
		MESSAGE(FATAL_ERROR "Could not find @LIBNAME@")
	ENDIF (@LIBNAME@_FIND_REQUIRED)
ENDIF (@LIBNAME@_FOUND)

