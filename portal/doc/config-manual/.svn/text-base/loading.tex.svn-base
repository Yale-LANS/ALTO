\section{Portal Service Configuration}

The P4P Portal services provided by your Portal Server expose P4P information of 
your network to P2P applications.  This information must be loaded to the 
Portal Server through Portal service configuration.

We have provided an interactive shell through which you can
load a Portal service configuration file and make manual updates, 
as well as monitor and debug the active configuration.

The Portal Shell may be run either on the same computer as the Portal
Server or another computer with network access to a port enabled
for administration (see Section~\ref{subsec:portal-config-interfaces}).

\subsection{Configuration Syntax}
\label{subsec:net-config-language}

The shell uses a Cisco IOS-like command syntax for updating and 
displaying the running configuration of your Portal service.

Section \ref{subsec:net-config-example} provides a brief walkthrough
to illustrate how to use the shell to configure your Portal service
with the network information. For further details, an annotated formal specification of the
configuration syntax is installed at:
\begin{verbatim}
/usr/share/doc/p4p-portal-docs-<version>/portal-shell-v2.1-spec.txt
\end{verbatim}
This file contains annotations discussing the usage of each command.
Beyond the commands specified in this document, there are other useful commands.  
As we will see, \texttt{show} commands allow you to display and
test the running configuration (see Section~\ref{sec:config-show}).

\subsection{Starting the Shell}

The Portal Shell is installed as \texttt{p4p\_portal\_shell}.  After starting
the shell, you must first specify the address and administration port for a 
running Portal Server:
\begin{verbatim}
$ p4p_portal_shell 
p4p# server p4p.Internet2.edu:6672
\end{verbatim}

Another way to specify the Portal Server is via command-line arguments:
\begin{verbatim}
$ p4p_portal_shell p4p.Internet2.edu:6672
\end{verbatim}

After starting the shell, the \texttt{p4p\#} prompt is displayed and you
can begin typing commands.
The \texttt{help} command displays the list of available commands and their
syntax:
\begin{verbatim}
p4p# help
\end{verbatim}

\subsection{Configuration Walkthrough}
\label{subsec:net-config-example}

A P4P Portal service configuration consists of
% is an \emph{internal} view of your network, consisting of
an ISP Identifier, PID-level network topology, and 
pDistances.
We will walk through the three parts of configuration using the Internet2 
network as an example.
The complete example configuration file is installed at:
\begin{verbatim}
/usr/share/doc/p4p-portal-docs-<version>/abilene.conf
\end{verbatim}

%The current configuration only supports ISP Traffic Engineering pDistances.

\subsubsection{ISP Identifier}
First, you must define an ISP Identifier.  This identifier should be 
globally unique, because it may be used by applications to distinguish 
your P4P Portal service from other network operators. 

We recommend using a domain name as the ISP Identifier.  
For example:
\begin{verbatim}
$ p4p_portal_shell p4p.Internet2.edu:6672
p4p# isp default internet2.edu
\end{verbatim}

\subsubsection{PID-Level Network Topology}

%{\em where do we introduce my Internet view?}

Network topology information is a major part of the configuration.  
It impacts the information provided to applications by the Location and 
pDistance services.

The network topology in P4P is specified as a PID-level ``my-Internet
view'' of network locations and their connectivity.  Conceptually, the
global IP address space is subdivided into PIDs.

A PID is a network partition ID.  Each PID consists of a collection 
of IP addresses (clients).  Thus, a PID can represent a PoP, metropolitan area,
interdomain 
peering point, set of clients with similar capabilities, or some other
grouping of clients.

When configuring a PID node, you can specify the set of associated 
IP prefixes. 
The PID is also given a number, name, and
type (\emph{internal} or \emph{external}).  
An internal PID should only be configured with 
IP prefixes within your network, while an external PID can be
configured with IP prefixes outside of your network (interdomain). For example:
\begin{verbatim}
p4p# pid internal 0 newy-us-abilene prefixes 128.36.0.0/16 210.150.0.0/23
p4p# pid internal 1 chic-us-abilene prefixes 12.108.127.0/24 192.16.104.0/23 172.16.0.0/12
p4p# pid external 100 peering-to-nox prefixes 10.1.0.0/16
\end{verbatim}

PIDs that have IP prefixes associated with them will be visible to clients.  You
may optionally define PIDs without any prefixes, which will not be visible to
users.  That is, they will not be included in the PID Maps or pDistance Maps
returned by the Portal Server.

After creating PID nodes, their connectivity can be specified by
the \texttt{pid link} command:
\begin{verbatim}
p4p# pid link newy-us-abilene chic-us-abilene link-newy-chic routing-weight 392
p4p# pid link chic-us-abilene newy-us-abilene link-chic-newy routing-weight 392 
p4p# pid link newy-us-abilene peering-to-nox link-participant-newy-nox 
\end{verbatim}
In the above example, you may notice that each intradomain PID link
(between internal PIDs) has a \emph{routing-weight} attribute.
The routing-weight is used by the Portal Server to determine 
PID-level shortest path routing:
\begin{verbatim}
p4p# pid routing weights
\end{verbatim}

\subsubsection{pDistances}
pDistances can be configured for each PID-level link in the topology.  Recall that
only the PIDs that have prefixes assigned to them are visible to users.  The Portal
Server will only return the total pDistances amongst PIDs visible to users. The
total pDistance from one PID to another is computed by the Portal Server
by summing the pDistance of each PID-level link along the route between the
two PIDs.

Each pDistance is a floating-point value between 0.0 and 100.0.
%raa: Make note about end-to-end pDistance being larger than 100.0

In many scenarios, PIDs that are ``closer'' together should have
smaller pDistances between them.  In particular:
\begin{itemize}
\item Intra-PID pDistance is a pDistance from a PID to itself. It
      conveys the preference for traffic remaining within the same PID.
      In many scenarios, intra-PID pDistances will be the smallest
      pDistances in the configuration.

\item Inter-PID pDistance is the total pDistance from one internal PID to
      another internal PID. Inter-PID pDistances convey preferences
      for traffic traveling from one PID in the ISP to another PID
      within the same ISP.  These will typically be larger than intra-PID
      pDistances, meaning traffic between different PIDs is preferred
      less than traffic within the same PID.

\item Interdomain pDistance is a pDistance from one internal PID to
      an external PID.  Interdomain pDistances convey preferences
      for traffic traveling to external locations (\eg, via an
      ISPs peering points).  These will typically be larger than
      both intra-PID and inter-PID pdistances, meaning traffic crossing
      these peering points is preferred less than traffic within
      the ISP.
\end{itemize}

There are several configuration options available for configuring pDistances
for individual PID-links:
\begin{itemize}
\item{Static PID-link pDistance}: Explicitly configure the pDistance for a single
     PID-level link in the topology.  This may configure the pDistance for
     traffic within the same PID (intra-PID), between two internal PIDs
     (intradomain), or between an internal PID and an external PID (interdomain).
\begin{verbatim}
p4p# pdistance link link-newy-chic static 9
p4p# pdistance link link-chic-newy static 8
p4p# pdistance link link-participant-newy-nox static 12 
\end{verbatim}

\item{Default Intra-PID pDistance}: Default pDistance from a PID
     to itself if not explicitly configured.
\begin{verbatim}
p4p# pdistance intra-pid default 1
\end{verbatim}

\item{Default PID-link pDistance}: Default pDistance for a PID-level
      link from one PID to a different PID if not explicitly configured.
\begin{verbatim}
p4p# pdistance pid-link default 10
\end{verbatim}
\end{itemize}

Finally, there are configuration options controlling the computed total
pDistance amongst PIDs:
\begin{itemize}
\item{Default Inter-PID pDistance}: Default pDistance of two internal PIDs
     if there are no routes between them (\ie, no set of PID-level links
     in the topology connect them).
\begin{verbatim}
p4p# pdistance inter-pid default 10
\end{verbatim}

\item{Default Interdomain pDistance}: pDistance from an internal PID
     to an external PID if they are connected by a PID-link but no link
     pDistance is specified:
\begin{verbatim}
p4p# pdistance interdomain default 65
\end{verbatim}

\item{Interdomain pDistance Policy}: Controls how pDistances to external
     PIDs are computed. By default, the pDistance from an internal PID
     to an external PID is the sum of the pDistance from the source PID
     to the ``egress'' internal PID and the pDistance of the link between
     ``egress'' PID and the external destination PID.  You may optionally
     exclude the ``intradomain'' part of interdomain pDistance with the
     following command:
\begin{verbatim}
p4p# pdistance interdomain exclude intradomain
\end{verbatim}
\end{itemize}
%\textbf{NOTE:} In the general case, the pDistance from one internal 
%client to an external client which belongs to another network depends 
%on both the source and the destination. 

After you load or manually modify the configuration, you 
can force the Portal Server to (re)compute the end-to-end pDistances 
immediately:
\begin{verbatim}
p4p# pdistance update
\end{verbatim}
Otherwise, the pDistances will be automatically updated 
periodically.

\subsection{Loading a Configuration File}

Once a Portal service configuration file is created, it can be loaded
into a running Portal Server via the shell:
\begin{verbatim}
$ p4p_portal_shell p4p.Internet2.edu:6672
p4p# load abilene.conf
\end{verbatim}

It is also possible to load a configuration file automatically when 
initially starting the shell:
\begin{verbatim}
$ p4p_portal_shell p4p.Internet2.edu:6672 abilene.conf
\end{verbatim}


\subsection{Configuration Verification and Validation}

Once you have generated and installed your configuration, the installed
configuration can be displayed and validated.

\subsubsection{Viewing Details}
\label{sec:config-show}

The \texttt{show} commands can display the running configuration of your Portal service
allowing you to verify the installed configuration.

To show the internal view of network topology information:
\begin{verbatim}
p4p# show topology nodes
p4p# show topology links
\end{verbatim}

To show the PID configurations:
\begin{verbatim}
p4p# show pid nodes
p4p# show pid links
\end{verbatim}

To view the PID Map visible to applications (via the \texttt{GetPIDMap} interface):
\begin{verbatim}
p4p# show pidmap
\end{verbatim}

To view the PID returned for individual IP addresses to applications (via the \texttt{GetPID} interface):
\begin{verbatim}
p4p# show getpid 
p4p# show getpid 128.36.0.1 10.1.254.254 10.254.0.1
\end{verbatim}

To view the pDistances returned to applications (via the \texttt{GetpDistance} interface):
\begin{verbatim}
p4p# show pdistance
p4p# show pdistance newy-us-abilene.internet2.edu chic-us-abilene.internet2.edu
p4p# show pdistance chic-us-abilene.internet2.edu peering-to-nox.internet2.edu
\end{verbatim}

\subsubsection{Configuration Analysis}

Other analysis can be performed on the running configurations. In particular, 
a tool (written in Bash and Perl) has been provided in the \texttt{p4p-portal-utils}
package that analyzes the relationship
between geographical distance and pDistances amongst network locations.

\textbf{NOTE:} To use this tool, the \texttt{Geo::IP} and \texttt{NetAddr::IP} 
Perl modules and \texttt{gnuplot} utility must be installed on your system.

The tool requires the GeoIP City Database.  If you do not already have it,
the latest database can be retrieved and uncompressed:
\begin{verbatim}
$ wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
$ gunzip GeoLiteCity.dat.gz
\end{verbatim}

The tool can then be run as:
\begin{verbatim}
$ export GEOIP_DB_CITY=GeoLiteCity.dat
$ p4p_portal_config_analysis.sh p4p.Internet2.edu:6672 abilene
\end{verbatim}
where the \texttt{GEOIP\_DB\_CITY} environment variable indicates the path to
the uncompressed GeoIP City Database, and the Portal Server's address and 
administration port number are given.  The final argument (\texttt{abilene}
in this case) indicates an
identification string used in the generated output files.

To see what the output files this tool generates:
\begin{verbatim}
$ p4p_portal_config_analysis.sh
\end{verbatim}

You can also view how this analysis tool works by looking into
the scripts. Using this as a template, you can easily generate your own 
customized tools for debugging and testing.

\subsubsection{Topology Visualization}

Sometimes it is useful to visualize the configured network topology.  A tool named \texttt{p4p\_portal\_topoviz}
is also provided in the \texttt{p4p-portal-utils} package that connects directly
to a running Portal Server's
administration port, extracts the topology, and outputs it in \texttt{graphviz}
format ready to be converted to a graphical image.

\textbf{NOTE:} To display the generated graphs, the \texttt{graphviz} package
must be installed on your system.

\texttt{p4p\_portal\_topoviz} can be used as follows to generate a PNG image
of the installed network topology:
\begin{verbatim}
$ p4p_portal_topoviz --server=p4p.Internet2.edu --port=6672 > abilene_topo.dot
$ neato -Tpng < abilene_topo.dot > abilene_topo.png
\end{verbatim}

\subsubsection{Other Utilities}

Note that the Portal Server administration API is available for use in your
own programs.  The API is written in C++, but the protocol itself is also
quite simple so porting to other languages (\eg, Perl or Python) should be
a simple task. For usage of the C++ API, the source code for the Portal Shell
itself is a good example.

If you are interested in directly using the administration API, please
contact the Yale LANS team.

\subsection{Converting Old Configurations}
\label{subsec:convert-config}

As P4P has evolved, the configuration syntax used by the Portal Shell has
evolved as well. The following configuration file versions have been used:
\begin{itemize}
\item \texttt{1.0}: Used in February 2008 field tests
\item \texttt{2.0}: Used in July 2008 field tests
\item \texttt{2.1}: Current version supported by Portal Shell
\end{itemize}

If you have configuration files older than the currently-supported version, they will
need to be converted before loading. Perl scripts have been provided (as part of the
\texttt{p4p-portal-shell} package) to convert
configuration files to the next-highest version.  Using this method, old configuration
files can be incrementally converted to the most recent version (\eg, convert version 1.0 to 2.0, 
then version 2.0 to 2.1).

\textbf{NOTE:} To use the conversion scripts, you will need to have the \texttt{NetAddr::IP} Perl
module installed on your system.

\subsubsection{Convert 1.0 to 2.0}

Converting configuration files from version 1.0 to 2.0 requires two steps.  First,
the version 1.0 configuration file must be preprocessed:
\begin{verbatim}
$ portal-config-v1.0-preprocess.pl my-config-v1.0.conf > my-config-v1.0-preprocessed.conf
\end{verbatim}

Next, the preprocessed configuration file can be converted to version 2.0:
\begin{verbatim}
$ portal-config-v1.0-to-v2.0.pl my-config-v1.0-preprocessed.conf > my-config-v2.0.conf
\end{verbatim}

\subsubsection{Convert 2.0 to 2.1}

Converting configuration files from version 2.0 to version 2.1 is done with the following
command:
\begin{verbatim}
$ portal-config-v2.0-to-v2.1.pl my-config-v2.0.conf > my-config-v2.1.conf
\end{verbatim}

\textbf{IMPORTANT:} The P4P Framework now uses a more unified architecture to support
interdomain configurations than previous versions.  You may notice from the tutorial
above that PIDs can be specified to group interdomain network locations. Due to this
change, and that the current Portal server supports only IP Prefixes, interdomain
configurations for previous versions are not converted.

