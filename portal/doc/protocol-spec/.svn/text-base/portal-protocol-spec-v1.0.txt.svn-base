THIS DOCUMENT IS OBSELETE AND BEING UPDATED
PLEASE REFER TO IETF ALTO PROTOCOL DRAFT AS A REFERENCE

Overview
========

This document discusses the interfaces exposed by the Portal Server
for both the Location Portal Service and the pDistance Portal Service.

Notation
========

The message captures in this document use '>' to prefix messages sent
from a client to the Portal Server, and '<' to prefix replies sent
from the Portal Server to a client.

Additionally, the message captures use chunked encodings for requests
and responses.  The Portal Server also supports non-chunked encodings
in requests from clients.

Common Data Types
=================

The following interface definitions refer to common data types. These
data types are represented by strings in specific formats.


IP Addresses
------------

IP addresses have the following form:

  <IPPrefix> ::= A1.A2.A3.A4/P
               | A1.A2.A3.A4

    where 0 <= Ai <= 255 and 0 <= P <= 32.
    
Currently, only IPv4 addresses are supported.


ISP Identifiers
---------------

ISP identifiers differentiate PIDs from different ISPs. An ISP
identifier has the following form:

  <ISP> ::= ISP.TLD

    where ISP and TLD are alphanumeric strings.


PIDs
----

PIDs have the following form:

  <PID> ::= N.i.<ISP>
          | N.e.<ISP>

    where N is a 32-bit unsigned integer.  The 'i' indicates
    an internal (intradomain) PID, while the 'e' indicates an
    external (interdomain) PID.


pDistances
----------

pDistances indicate the ISP's 'distance' between a pair of network
locations (e.g., PIDs).  pDistances have the following form:

  <pDistance> ::= F
                | NAN
                | nan
                | NaN

    where F is a floating-point number and the 'nan' strings indicate
    that no pDistance is defined between the pair of PIDs.

Location Portal Service
=======================

The Location Portal Service provides interfaces for mapping between
IP addresses and PIDs.


GetPIDs
-------

Purpose:
  Maps IP addresses into PIDs.

Input:
  Either a list of IP addresses, or nothing.

Output:
  List of IP address -> PID pairs.

Semantics:
  If a list of IP addresses is supplied, the IP addresses are mapped into
  their corresponding PIDs.  If no IP addresses are supplied, the
  IP address of the client for this connection is mapped to its
  corresponding PID.

HTTP Format:
  Method:       POST (if non-empty request) or GET (if empty request)
  Path:         /networkmap
  Content-Type: text/plain

  Request Body:
    <IPPrefix>
    <IPPrefix>
    ...
    <IPPrefix>

  Reponse Body:
    <IPPrefix> <PID>
    <IPPrefix> <PID>
    ...
    <IPPrefix> <PID>

Message Capture:

>  POST /networkmap HTTP/1.1
>  Host: localhost:6672
>  Accept: */*
>  Transfer-Encoding: chunked
>  Expect: 100-continue
>

<  HTTP/1.1 100 Continue
<

>  e
>  128.36.1.0
>

>  0
>

<  HTTP/1.1 200 OK
<  Transfer-Encoding: chunked
<  Content-Type: text/plain
<  Date: Thu, 20 Nov 2008 06:25:43 GMT
<
<  21
<  128.36.1.0/32	0.i.internet2.edu
<
<  0
<

GetPIDMap
---------

Purpose:
  Retrieves defined PID -> IP Prefix mappings.

Input:
  None.

Output:
  List of PID -> [IPPrefix]+ mappings.

Semantics:
  The result is the list of PIDs defined by the Portal Server, and
  for each, the IP prefixes mapped ot that PID.  Each list of IP
  prefixes begins with an integer stating the number of prefixes
  in the list.

HTTP Format:
  Method:       GET
  Path:         /pid/map
  Content-Type: text/plain

  Response Body:
    <PID> <INTEGER> [ <IPPrefix> ]+
    <PID> <INTEGER> [ <IPPrefix> ]+
    ...
    <PID> <INTEGER> [ <IPPrefix> ]+

Message Capture:

>  GET /pid/map HTTP/1.1
>  Host: localhost:6672
>  Accept: */*
>

<  HTTP/1.1 200 OK
<  Transfer-Encoding: chunked
<  Content-Type: text/plain
<  Date: Thu, 20 Nov 2008 06:22:14 GMT
<
<  237
<  0.i.internet2.edu	2	128.36.0.0/16	210.150.0.0/23
<  1.i.internet2.edu	3	12.108.127.0/24	172.16.0.0/12	192.16.104.0/23
<  2.i.internet2.edu	1	141.161.0.0/16
<  3.i.internet2.edu	1	130.207.0.0/16
<  4.i.internet2.edu	2	128.83.0.0/16	129.7.235.0/24
<  5.i.internet2.edu	1	155.97.0.0/16
<  6.i.internet2.edu	2	192.206.12.0/24	198.51.64.0/24
<  7.i.internet2.edu	1	140.142.0.0/16
<  8.i.internet2.edu	3	128.111.0.0/16	128.195.0.0/16	169.232.0.0/16
<  100.e.internet2.edu	1	10.1.0.0/16
<  105.e.internet2.edu	1	10.2.0.0/16
<  120.e.internet2.edu	1	10.3.0.0/16
<  200.e.internet2.edu	1	10.0.0.0/8
<
<  0
<

pDistance Portal Service
========================

GetpDistance
------------

Purpose:
  Retrieves pDistances between PIDs.

Input:
  List with each item specifying
  Source PID -> vector of Destination PID.

Output:
  List with each item specifying
  Source PID -> vector of (Destination PID, pDistance).

Semantics:
  Each returned pDistance is the directional pDistance from the Source PID
  to the Destination PID.

  The <INC-REVERSE> flag is 'inc-reverse' if both forward (Source->Destination)
  pDistances and reverse (Destination->Source) pDistances should be
  returned.  The flag is 'no-reverse' if only forward (Source->Destination)
  pDistances should be returned.

  The vector of Destination PIDs begins with an integer specifying
  the number of items in the vector.

  A zero-length vector of Destination PIDs is automatically interpreted
  by the server as a vector containing all PIDs. For example, if a line
  in the request contains 'pid1.i.isp.net no-reverse 0', the response will contain
  a line with pDistances from the PID pid1.i.isp.net to all other
  PIDs.
  
  An empty request is interpreted by the server as a request for the full
  pDistance matrix. The <INC-REVERSE> flag is 'no-reverse' for each row.

HTTP Format:
  Method:       POST (if non-empty request) or GET (if empty request)
  Path:         /pdistance
  Content-Type: text/plain

  Request Body:
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> ]*
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> ]*
    ...
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> ]*

  Response Body:
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> <pDistance> [ <pDistance> ]? ]*
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> <pDistance> [ <pDistance> ]? ]*
    ...
    <PID> [ inc-reverse | no-reverse ] <INTEGER> [ <PID> <pDistance> [ <pDistance> ]? ]*

Message Capture:

>  POST /pdistance HTTP/1.1
>  Host: localhost:6672
>  Accept: */*
>  Transfer-Encoding: chunked
>  Expect: 100-continue
>

<  HTTP/1.1 100 Continue
<

>  1b
>  0.i.internet2.edu	inc-reverse	0

<  HTTP/1.1 200 OK
<  Transfer-Encoding: chunked
<  Content-Type: text/plain
<  Date: Thu, 20 Nov 2008 06:42:18 GMT
< 
<  15C
<  0.i.internet2.edu	inc-reverse	13	0.i.internet2.edu	1	1
						1.i.internet2.edu	9	8
						2.i.internet2.edu	0	0
						3.i.internet2.edu	16	15
						4.i.internet2.edu	19	19
						5.i.internet2.edu	19	15
						6.i.internet2.edu	14	14
						7.i.internet2.edu	26	20
						8.i.internet2.edu	21	17
						100.e.internet2.edu	12	65
						105.e.internet2.edu	29	65
						120.e.internet2.edu	33	65
						200.e.internet2.edu	97	65
<
<  0
<

  NOTE: Line in response is wrapped for readability in this
  document. The true response only contains a single line
  beginning with '0.i.internet2.edu ...'

