/*
 * Copyright (c) 2009,2010 Yale Laboratory of Networked Systems
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *     * Neither the name of Yale University nor the names of its contributors may
 *       be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * P4P COM Interface Description
 */

//import "oaidl.idl";
//import "ocidl.idl";
import "unknwn.idl";

/* P4P portal interfaces */
[object, uuid(1cf8b2ca-3694-4e14-96d8-79170b8fae2d), helpstring("ISP interface: used to manage ISP portal PIDMap and PDistanceMap")]
interface IISP : IUnknown
{
	HRESULT __stdcall SetPortal([in, string] const unsigned char *addr, [in] unsigned short port) = 0;
	HRESULT __stdcall SetFile([in, string] const unsigned char *pidFile, [in, string] const unsigned char *pdistanceFile) = 0;
	HRESULT __stdcall LoadP4PInfo() = 0;
	HRESULT __stdcall Lookup([in, string] const unsigned char *addr, [out] int *PID_index) = 0;
	HRESULT __stdcall GetNumPIDs([out] unsigned int *nIntraISPPIDs, [out] unsigned int *nTotalPIDs) = 0;
	HRESULT __stdcall GetPDistance([in] const int PID1, [in] const int PID2, [out] int *pDistance) = 0;
}

/*
[object, uuid(1ef60ed5-544a-44fb-9bc1-9471dd45ec09), helpstring("ISPPIDMap interface: used to manage ISP PIDMap")]
interface IISPPIDMap : IUnknown
{	
	HRESULT __stdcall SetPortal([in, string] const unsigned char *addr, [in] unsigned short port) = 0;
	HRESULT __stdcall SetFile([in, string] const unsigned char *filename) = 0;	
	HRESULT __stdcall LoadP4PInfo() = 0;
	HRESULT __stdcall Lookup([in, string] const unsigned char *addr, [out] int *PID_index) = 0;
	HRESULT __stdcall GetNumPIDs([out] unsigned int *nIntraISPPIDs, [out] unsigned int *nTotalPIDs) = 0;
	//HRESULT __stdcall GetTTL([out] time_t *ttl) = 0;	
	//HRESULT __stdcall GetLastUpdate([out] time_t *timestamp) = 0;
	//HRESULT __stdcall GetVersion([out] char **pVersion) = 0;
}

[object, uuid(c91d8cdc-5307-4450-be96-564c72bcb319), helpstring("ISPPDistanceMap interface: used to manage ISP PDistanceMap")]
interface IISPPDistanceMap : IUnknown
{	
	HRESULT __stdcall SetPortal([in, string] const unsigned char *addr, [in] unsigned short port) = 0;
	HRESULT __stdcall SetFile([in, string] const unsigned char *filename) = 0;
	HRESULT __stdcall LoadP4PInfo() = 0;	
	HRESULT __stdcall GetPDistance([in] const int PID1, [in] const int PID2, [out] int *pDistance) = 0;
	//HRESULT __stdcall GetTTL([out] time_t *ttl) = 0;	
	//HRESULT __stdcall GetLastUpdate([out] time_t *timestamp) = 0;
	//HRESULT __stdcall GetVersion([out] char **pVersion) = 0;
}
*/

[object, uuid(125076f2-6ee3-49e5-8f1f-c127cc98ce13), helpstring("ISPManager interface: used to manage multiple ISPs")]
interface IISPManager : IUnknown
{
	HRESULT __stdcall AddISP([in, string] const unsigned char *name, [in] const IISP *pISP) = 0;
	HRESULT __stdcall GetISP([in, string] const unsigned char *name, [out] IISP **ppISP) = 0;
	HRESULT __stdcall RemoveISP([in, string] const unsigned char *name) = 0;
}

/* P2P application interfaces */
enum PEERTYPE 
{
	PT_PEER, 
	PT_SEED, 
	PT_SUPERNODE
};

typedef struct
{
	float DownloadCapacity;
	float UploadCapacity;
	float CurrentUploadRate;
	float CurrentDownloadRate;
	unsigned int NumActivePeers;
	enum PEERTYPE PeerType;
} PEERINFO;

[object, uuid(5d643cf0-5a69-47d7-ae74-32f0ba526408), helpstring("P4PPeer interface: used as a P4P peer")]
interface IP4PPeer : IUnknown
{
	HRESULT __stdcall SetPeerInfo([in, string] const unsigned char *IPAddress, [in] const PEERINFO PeerInfo) = 0;
	HRESULT __stdcall GetHomeISP([out] IISP **ppISP) = 0;
	HRESULT __stdcall GetHomePID([out] int *PID) = 0;
	HRESULT __stdcall GetPeerInfo([out] PEERINFO *pPeerInfo) = 0;
}

[object, uuid(7647b6f0-cbce-49bc-b0aa-16568ae19e27), helpstring("P4PPeerList interface: used as a list of P4P peers")]
interface IP4PPeerList : IUnknown
{
	HRESULT __stdcall GetSize([out] unsigned int *size) = 0;
	HRESULT __stdcall GetPeer([in] unsigned int index, [out] IP4PPeer **ppPeer) = 0;
}

enum PSALGORITHM 
{
	PSA_LOCATION, 
	PSA_FILESHARING_GENERIC, 
	PSA_FILESHARING_MATCHING, 
	PSA_STREAMING_SSM
};

[object, uuid(066203cb-fe63-4784-9da4-0a540af49f31), helpstring("PGMOptions interface: used to configure a PGM")]
interface IPGMOptions : IUnknown
{
	HRESULT __stdcall SetAlgorithm([in] const enum PSALGORITHM algorithm) = 0;
	HRESULT __stdcall SetLocationSelectionPercent([in] const double intrapid, [in] const double intraisp) = 0;	
}

[object, uuid(b83a838d-300a-4fb9-bd4f-b28c23711118), helpstring("PGM interface: used to manage a Peering Guidance Matrix")]
interface IPGM : IUnknown
{	
	//HRESULT __stdcall GetPGMOptions([out] IPGMOptions **ppPGMOptions) = 0;	
	HRESULT __stdcall GetLocationSelectionPercent([out] double *intrapid, [out] double *intraisp) = 0;	
	HRESULT __stdcall GetWeight([in] const int src, [in] const int dst, [out] double *weight) = 0;
}

[object, uuid(640725b7-c02c-4437-b5ee-1904fe831a42), helpstring("PGMSelectionManager interface: used in a channel, used for peer join, leave, and peer selection")]
interface IPGMSelectionManager : IUnknown
{
	HRESULT __stdcall SetISPManager([in] const IISPManager *pISPManager) = 0;
	HRESULT __stdcall SetAOE([in, string] const unsigned char *addr, [in] unsigned short port) = 0; //Default AOE is localhost:6673
	HRESULT __stdcall SetDefaultPGMOptions([in] const IPGMOptions *pPGMOptions) = 0;
	HRESULT __stdcall SetISPPGMOptions([in] const IISP *pISP, [in] const IPGMOptions *pPGMOptions) = 0;
	HRESULT __stdcall InitGuidance() = 0;
	HRESULT __stdcall GetISPPGM([in] const IISP *pISP, [out] IPGM **ppPGM) = 0;	
	HRESULT __stdcall AddPeer([in] const IP4PPeer *pPeer) = 0;
	HRESULT __stdcall SelectPeers([in] const IP4PPeer *pPeer, [in] const int count, [out] IP4PPeerList **ppPeerList) = 0;
	HRESULT __stdcall UpdatePeerInfo([in] const IP4PPeer *pPeer) = 0;
	HRESULT __stdcall RemovePeer([in] const IP4PPeer *pPeer) = 0;
}

[object, uuid(d3d48e88-a649-4563-b462-6db248ff73a0), helpstring("P4PUpdateManager interface: used to self update portal information and PGMs")]
interface IP4PUpdateManager : IUnknown
{		
	HRESULT __stdcall SetISPManager([in] const IISPManager *pISPManager) = 0;
	HRESULT __stdcall AddPGMSelectionManager([in] const IPGMSelectionManager *pPSM) = 0;
	HRESULT __stdcall RemovePGMSelectionManager([in] const IPGMSelectionManager *pPSM) = 0;
	HRESULT __stdcall Run() = 0;
	HRESULT __stdcall Stop() = 0;
}

enum LOGLEVEL {
	LOG_TRACE,	/**< Lots of internal information (e.g., internal steps of peer selection) */
	LOG_DEBUG,	/**< Some debug information (e.g, peer events, peer selection results, fetched P4P data) */
	LOG_INFO,	/**< Informational program-level events (e.g., update manager status) */
	LOG_WARN,	/**< Warnings only */
	LOG_ERROR,	/**< Errors only */
	LOG_NONE,	/**< No logs (this is the default) */
};

[object, uuid(31681dba-be54-4ddc-8808-c0d080c18191), helpstring("interface IP4PFactory is used for creating P4P library COM objects")]
interface IP4PFactory : IUnknown
{
	HRESULT __stdcall CreateISP([out] IISP **ppISP) = 0;
	//HRESULT __stdcall CreateISPPIDMap([out] IISPPIDMap **ppISPPIDMap) = 0;
	//HRESULT __stdcall CreateISPPDistanceMap([out] IISPPDistanceMap **ppISPPDistanceMap) = 0;
	HRESULT __stdcall CreateISPManager([out] IISPManager **ppISPManager) = 0;
	HRESULT __stdcall CreateP4PPeer([out] IP4PPeer **ppP4PPeer) = 0;
	HRESULT __stdcall CreatePGMSelectionManager([out] IPGMSelectionManager **ppPGMSelectionManager) = 0;
	HRESULT __stdcall CreatePGMOptions([out] IPGMOptions **ppPGMOptions) = 0;	
	HRESULT __stdcall CreateP4PUpdateManager([out] IP4PUpdateManager **ppP4PUpdateManager) = 0;
	HRESULT __stdcall SetLogLevel([in] const enum LOGLEVEL level) = 0;
}

[uuid(1e205711-9dfd-42e4-b8fd-ea44e256343f), helpstring("COM Interfaces for P4P library")]
library P4PLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	
	interface IP4PFactory;	
	interface IISP;
	//interface IISPPIDMap;
	//interface IISPPDistanceMap;
	interface IISPManager;
	interface IP4PPeer;
	interface IP4PPeerList;
	interface IPGMSelectionManager;
	interface IPGMOptions;
	interface IPGM;
	interface IP4PUpdateManager;
}
